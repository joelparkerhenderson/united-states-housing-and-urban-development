#!/usr/bin/env python3

##
# Convert HUD HMIS XSD schema file text from XML to SQL.
#
# This is a one-off development script. Not for production use.
##

import re
import sys
import importlib
import xml.etree.ElementTree as ElementTree
from functools import reduce

# snake_case converts capitalization and underscores.
#
# Example:
#
#     snake_case("fooGooHoo") => "foo_goo_hoo"
#
def snake_case(str):
    return reduce(lambda x, y: x + ('_' if x[-1].islower() and y.isupper() else '') + y, str).lower()

# Load the HMIS XSD file to an XML ElementTree root.
#
# This function does some simple text correction,
# such as fixing text apostrophes to be consistent.
#
def load_hud_hmis_xsd_file(file_name):
    with open(file_name) as f: text = f.read()
    text = re.sub(r'n\'t', 'nâ€™t', text)  # Smart quote
    return ElementTree.fromstring(text)

# Schema representation for converting from XML to SQL.
#
# Example:
#
#     schema = Schema("myDemoName")
#     schema.sql_name => "my_demo_name"
#
class Schema:

    def __init__(self, xml_name):
        self.xml_name = xml_name
        self.sql_name = snake_case(xml_name)
        self.domains = []
        self.tables = []

    def sql(self):
        return \
            self.sql_drop_domains() + '\n\n' + \
            self.sql_drop_tables() + '\n\n' + \
            self.sql_create_domains() + '\n\n' + \
            self.sql_create_tables()

    def sql_create_domains(self):
        return '\n'.join(map(lambda x: x.sql_create() , self.domains))

    def sql_drop_domains(self):
        return '\n'.join(map(lambda x: x.sql_drop(), self.domains))

    def sql_create_tables(self):
        return '\n\n'.join(map(lambda x: x.sql(), self.tables))

    def sql_drop_tables(self):
        return '\n'.join(map(lambda x: x.sql_drop(), self.tables))

# Domain representation for converting from XML to SQL.
#
# Example:
#
#     domain = Domain("myDemoName", "myDemoDatatype")
#     domain.sql_name => "my_demo_name"
#
class Domain:

    def __init__(self, xml_name, sql_datatype):
        self.xml_name = xml_name
        self.sql_datatype = sql_datatype
        self.sql_name = snake_case(re.sub(r':', '_', xml_name))

    def sql_create(self):
        return f"CREATE DOMAIN \"{self.sql_name}\" {self.sql_datatype};"

    def sql_drop(self):
        return f"DROP DOMAIN IF EXISTS \"{self.sql_name}\" CASCADE;"
        

# Table representation for converting from XML to SQL.
#
# Example:
#
#     table = Table("myDemoName")
#     table.sql_name => "my_demo_name"
#
class Table:

    def __init__(self, xml_name):
        self.xml_name = xml_name
        self.sql_name = snake_case(xml_name)
        self.columns = []
        self.rows = []

    def sql(self):
        s = self.sql_create()
        if len(self.rows) > 0:
            s = s + '\n\n' + self.sql_insert()
        return s

    def sql_create(self):
        return f"CREATE TABLE \"{self.sql_name}\" (\n{self.sql_columns()}\n);"

    def sql_drop(self):
        return f"DROP TABLE IF EXISTS \"{self.sql_name}\" CASCADE;"

    def sql_insert(self):
        return f"INSERT INTO \"{self.sql_name}\" values\n{self.sql_rows()};"

    def sql_columns(self):
        last = self.columns[-1]
        return '\n'.join(map(lambda x: '    ' + x.sql() + (',' if x != last else '') + ' ' + x.sql_comment(), self.columns))

    def sql_rows(self):
        return ',\n'.join(map(lambda x: '    ' + x.sql(), self.rows))

# Column representation for converting from XML to SQL.
#
# Example:
#
#     column = Column("myDemoName", "myDemoType")
#     column.sql_name => "my_demo_name"
#     column.sql_datatype => "my_demo_type"
#
# There's logic to handle the special case when the input
# XML XSD column is an association that we want to convert
# to use a typical SQL name and our preferred UUID datatype:
#
#     column = Column("Foo", "hmis:foo")
#     column.sql_name => "foo_id"
#     column.sql_datatype => "uuid"
#
class Column:

    def __init__(self, xml_name, xml_datatype):
        self.xml_name = xml_name
        self.xml_datatype = xml_datatype
        self.sql_name = self.xml_name_to_sql_name(xml_name)
        self.sql_datatype = self.xml_datatype_to_sql_datatype(xml_datatype)
        self.primary_key = False
        self.comment = None

    def xml_name_to_sql_name(self, xml_name):
        lookup = {
            'CoCCode': 'coc_code',
        }
        if xml_name in lookup:
            return lookup.get(xml_name)
        if self.is_hmis_association():
            return snake_case(xml_name) + '_id'
        else:
            return snake_case(xml_name)

    def xml_datatype_to_sql_datatype(self, xml_datatype):
        if self.is_hmis_association():
            return 'integer'
        if xml_datatype == 'xs:positiveInteger':
            return f"integer CHECK ({self.sql_name} > 0)"
        if xml_datatype == 'xs:nonNegativeInteger':
            return f"integer CHECK ({self.sql_name} >= 0)"
        if xml_datatype == 'hmis:state': 
            return 'hmis_state references state(id)'
        if xml_datatype == 'hmis:dateRangeCapped': 
            return 'integer references date_range_capped(id)'
        # Compare with code names
        if xml_datatype in code_names:
            return 'text references ' + snake_case(xml_datatype) + '(id)'
        if xml_datatype.startswith("hmis:"):
            x = re.sub(r'^hmis:', '', xml_datatype) # lstrip
            if x in code_names:
                return 'text references ' + snake_case(x) + '(id)'
        # Is it a string type?
        x = re.sub(r'hmis:string(\d+)', r'varchar(\1)', xml_datatype)
        # Default is to do snake and handle the output via domain
        return snake_case(re.sub(r':', '_', x))

    def is_hmis_association(self):
        return snake_case(self.xml_datatype) == 'hmis:' + snake_case(self.xml_name)

    def sql(self):
        return self.sql_name + ' ' + self.sql_datatype + self.sql_primary_key_contraint()

    def sql_primary_key_contraint(self):
        if self.primary_key:
            return " PRIMARY KEY"
        else:
            return ""

    def sql_comment(self):
        if self.comment is not None:
            return "-- " + self.comment
        else:
            return ""

# Row representation for converting from XML to SQL.
#
# Example:
#
#     row = Row()
#     field = Field("Yes")
#     row.fields.append(field)
#
class Row:

    def __init__(self):
        self.fields = []

    def sql(self):
        return self.sql_fields()

    def sql_fields(self):
        return '(' + ', '.join(map(lambda x: x.sql(), self.fields)) + ')'

# Field representation for converting from XML to SQL.
#
# Example:
#
#     field = Field("Yes")
#     field.sql() => "'Yes'"
#
class Field:

    def __init__(self, value):
        self.sql_value = '\'' + value + '\''

    def sql(self):
        return self.sql_value

# Convenience because this string shows up so many places.
XS = "{http://www.w3.org/2001/XMLSchema}"

# Global
code_names = []

def parse_simple_type_to_table_of_codes(e):
    name = e.attrib.get('name','?')
    table = Table(name)
    for restriction in e.findall(XS + 'restriction'):
        for enumeration in restriction.findall(XS + 'enumeration'):
            value = enumeration.attrib.get('value')
            if value is not None:
                row = Row()
                field = Field(value)
                row.fields.append(field)
                text = value # default
                annotation = enumeration.find(XS + 'annotation')
                if annotation is not None:
                    documentation = annotation.find(XS + 'documentation')
                    if documentation is not None:
                        text = documentation.text
                field = Field(text)
                row.fields.append(field)
                table.rows.append(row)
                # for annotation in enumeration.findall(XS + 'annotation'):
                #     for documentation in annotation.findall(XS + 'documentation'):
                #         for text in documentation.itertext():
                #             field = Field(text)
                #             row.fields.append(field)
                #             table.rows.append(row)
    if len(table.rows) > 0:
        code_names.append(name)
        table.columns.append(Column('id', 'text'))
        table.columns.append(Column('text', 'text'))  
        table.columns[0].primary_key = True
        return table
    else:
        return None
    
def parse_complex_type_to_table(e):
    name = e.attrib.get('name','?')
    table = Table(name)
    if name == "dateRangeCapped":
        table.columns.append(Column('id', 'integer'))
    for sequence in e.findall(XS + 'sequence'):
        for element in sequence.findall(XS + 'element'):
            name = element.attrib.get('name','?')
            if name == 'TypeProvided' or name == 'SubTypeProvided':
                datatype = 'integer' # This is a lookup number - see doc
            else:
                datatype = element.attrib.get('type','?')
            column = Column(name, datatype)
            # Get text for comment, if any
            annotation = element.find(XS + 'annotation')
            if annotation is not None:
                documentation = annotation.find(XS + 'documentation')
                if documentation is not None:
                    text = documentation.text
                    if text is not None:
                        text = text.partition('\n')[0]
                        text = re.sub(r' +$', '', text)
                        text = re.sub(r',$', '.', text)
                        column.comment = text
            table.columns.append(column)
    if len(table.columns) > 0:
        table.columns[0].primary_key = True
        return table
    else:
        return None

def main():
    # Read the XML XSD file text into an XML element tree root.
    file_name = sys.argv[1]
    root = load_hud_hmis_xsd_file(file_name)

    # Create a schema object that will hold all the tables.
    schema = Schema("public")
    schema.domains.append(Domain('xs:date', 'date'))
    schema.domains.append(Domain('xs:dateTime', 'timestamp'))
    schema.domains.append(Domain('xs:gYear', 'integer')) # TODO scope to appropriate current years
    schema.domains.append(Domain('xs:integer', 'integer'))
    schema.domains.append(Domain('xs:unsignedInt', 'integer'))
    schema.domains.append(Domain('xs:string', 'text'))
    schema.domains.append(Domain('hmis:coc_code', 'text')) # TODO what is this?
    schema.domains.append(Domain('hmis:email', 'varchar(320)'))
    schema.domains.append(Domain('hmis:money', 'money'))
    schema.domains.append(Domain('hmis:nameHashingOption', 'varchar'))
    schema.domains.append(Domain('hmis:nameHashingOptionPlain', 'varchar(50)'))
    schema.domains.append(Domain('hmis:nameHashingOptionSHA1RHY', 'char(40)')) # TODO /^[a-zA-Z0-9]$)/
    schema.domains.append(Domain('hmis:ssnHashingOption', 'varchar'))
    schema.domains.append(Domain('hmis:ssnHashingOptionPlain', 'varchar(50)')) # TODO /^[0-9xX]{9}$/
    schema.domains.append(Domain('hmis:ssnHashingOptionSHA1RHY', 'char(44)')) # TODO /^[a-zA-Z0-9]$)/
    schema.domains.append(Domain('hmis:state', 'char(2)'))
    schema.domains.append(Domain('hmis:string32', 'varchar(32)'))
    schema.domains.append(Domain('hmis:zipCode', 'varchar(10)'))
    schema.domains.append(Domain('hmis:disabilityResponseBase', 'integer')) # TODO this is a lookup id
    schema.domains.append(Domain('hmis:tCellCount', 'integer')) # TODO 0..1500
    schema.domains.append(Domain('hmis:hpScreeningScore', 'char(2)')) # TODO /^[0-9]{2}$/
    schema.domains.append(Domain('hmis:extension', 'varchar(5)')) # telephone extension # TODO [0-9]{1,5}
    schema.domains.append(Domain('hmis:phoneNumber', 'char(10)')) # telephone number in U.S. # TODO pattern "[2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4}"
    schema.domains.append(Domain('hmis:dateRangeCapped', 'integer')) # TODO references date_range_capped(id)

    for e in root.findall(XS + 'simpleType'):
        table = parse_simple_type_to_table_of_codes(e)
        if table is not None:
            schema.tables.append(table)

    for e in root.findall(XS + 'complexType'):
        table = parse_complex_type_to_table(e)
        if table is not None:
            schema.tables.append(table)

    print(schema.sql())

if __name__ == '__main__':
    main()
